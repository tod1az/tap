generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status{
  pending
  in_progress
  completed
}

model assigns {
  id           Int       @id @default(autoincrement())
  title        String    @db.VarChar(255)
  description  String?   @db.Text
  status       Status    @default(pending) 
  user_id      Int
  start_date   DateTime  @default(now()) @db.Timestamp(6)
  due_date     DateTime? @db.Timestamp(6)
  updated_at   DateTime? @default(now()) @db.Timestamp(6)
  user         users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "assigns_user")
  
  @@index([start_date], map: "idx_assigns_start_date")
  @@index([due_date], map: "idx_assigns_due_date")
  @@index([user_id], map: "idx_assigns_user_id")
}

model users {
  id          Int        @id @default(autoincrement())
  email       String     @unique @db.VarChar(255)
  role        String     @default("user") @db.VarChar(50)
  password    String     @db.VarChar(255)
  employee_id Int?       @unique
  created_at  DateTime?  @default(now()) @db.Timestamp(6)
  updated_at  DateTime?  @default(now()) @db.Timestamp(6)
  assigns     assigns[]
  itemloss    itemloss[]
  employee    employees? @relation(fields: [employee_id], references: [id], onDelete: Cascade)
}

model employees {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(100)
  lastname   String    @db.VarChar(100)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  user       users?

  @@index([name], map: "idx_employees_name")
  @@index([lastname], map: "idx_employees_lastname")
  @@index([created_at], map: "idx_employees_created_at")
}

model itemloss {
  id         Int       @id @default(autoincrement())
  stock      Int
  user_id    Int?
  item_id    Int
  created_at DateTime? @default(now()) @db.Timestamp(6)
  items      items     @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "itemloss_item")
  users      users?    @relation(fields: [user_id], references: [id], onUpdate: NoAction, map: "itemloss_user")

  @@index([item_id], map: "idx_itemloss_item_id")
  @@index([user_id], map: "idx_itemloss_user_id")
}

model items {
  id           Int            @id @default(autoincrement())
  description  String
  price        Int
  stock        Int            @default(0)
  created_at   DateTime?      @default(now()) @db.Timestamp(6)
  updated_at   DateTime?      @default(now()) @db.Timestamp(6)
  itemloss     itemloss[]
  stockentries stockentries[]
}

model stockentries {
  id         Int       @id @default(autoincrement())
  stock      Int
  item_id    Int
  date       DateTime  @default(now()) @db.Timestamp(6)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  items      items     @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "stockentries_item")

  @@index([date], map: "idx_stockentries_date")
  @@index([item_id], map: "idx_stockentries_item_id")
}


